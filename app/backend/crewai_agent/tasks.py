import os
from crewai import Task
from textwrap import dedent
from app.backend.tools import ReportTool

class ReportTasks:
    """
    A class to define tasks for agents in the RAG system.
    """

    def summary_task(self, agent, query):
        """
        Creates a summary task for the given query.

        Args:
            agent (Agent): The agent responsible for summarizing the query.
            query (str): The project-specific query.

        Returns:
            Task: The summary task.
        """
        return Task(
            description=dedent(f"""\
                Analyze the project-specific query: {query}. Summarize the query into one statement,
                which includes all important details. It should compulsorily include each and every important financial figure,
                date, and any other project-related metric.
            """),
            expected_output=dedent("""\
                Your output should be a Python list containing a single string with the summary generated from the query.
            """),
            agent=agent
        )

    def policy_task(self, agent):
        """
        Creates a policy extraction task.

        Args:
            agent (Agent): The agent responsible for extracting policy-related information.

        Returns:
            Task: The policy task.
        """
        return Task(
            description=dedent("""
                    "You have the following tasks"
                    "1.Create a single comprehensive question from the summary provided by summary agent which includes all financial, date, and project-related data"
                    "2.Prepend 'What are the compliance criteria, eligibility criteria, fees' at the beginning of the question."
                    "3.Use the question to call_tool."
                    "4.Your input to the tool has to be a list of python string."
                    "5.After receiving the docs from the tool, extract the information related to the input question into a single document having headers and sub-heading"
                    "Keep in view the following points:"
                    "1.Remember you have to craft the question from the text not related to the text."
                    "2.While drafting the document, keep in mind the input question."
                </example_input>
            """),
            expected_output=dedent("""
                A detailed and comprehensive document containing all the relevant eligibility criteria, compliance criteria, and application procedure, fees about the project.
            """),
            tools=[ReportTool()],
            agent=agent,
        )

    def financial_task(self, agent):
        """
        Creates a financial options extraction task.

        Args:
            agent (Agent): The agent responsible for extracting financial options.

        Returns:
            Task: The financial task.
        """
        return Task(
            description=dedent("""
                    "You have the following tasks"
                    "1.Create a single comprehensive question from the summary provided by summary agent which includes all financial, date, and project-related data"
                    "2.Prepend ' What are the financing options, subsidies, grants, and incentives available' at the beginning of the question."
                    "3.Use the question to call_tool."
                    "4.Your input to the tool has to be a list of python string."
                    "5.After receiving the docs from the tool, extract the information related to the input question into a single document having headers and sub-heading"
                    "Keep in view the following points:"
                    "1.Remember you have to craft the question from the text not related to the text."
                    "2.While drafting the document, keep in mind the input question."
            """),
            expected_output=dedent("""
                Use the retrieved docs to formulate all the financial options, subsidies, grants, and their benefits related to the project.
            """),
            tools=[ReportTool()],
            agent=agent
        )

    def report_task(self, agent):
        """
        Creates a report generation task.

        Args:
            agent (Agent): The agent responsible for generating the report.

        Returns:
            Task: The report task.
        """
        return Task(
            description=dedent("""
                    "You have the following tasks"
                    "1.Collect the answers generated by policy_agenst and financial agent"
                    "2.Read the answers by both agensts"
                    "3.Create a commulative report from these two agents responses"
                    "4.Be detail oriented, Genuine and Act as an expert report generator"
            """),
            expected_output=dedent("""
                A structured report having proper headings, subheadings, and content.
            """),
            agent=agent
        )
